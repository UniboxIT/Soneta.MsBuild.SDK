<?xml version="1.0" encoding="utf-8"?>

<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(IsTestProject)' != 'true' AND '$(AggregateOutput)' == 'true'">
    <AggregatePath Condition="$(AggregatePath) == ''">..\</AggregatePath>
    <BaseOutputPath>$(AggregatePath)bin\</BaseOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <GlobalJsonFilePath>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), global.json))\global.json</GlobalJsonFilePath>
    <SonetaSdkLatestVersionFilePath>$(NuGetPackageRoot)soneta.sdk\latest_version.txt</SonetaSdkLatestVersionFilePath>
    <SonetaSdkNugetApiUrl>https://api.nuget.org/v3-flatcontainer/soneta.sdk/index.json</SonetaSdkNugetApiUrl>
    <SonetaSdkUpdateInterval Condition="'$(SonetaSdkUpdateInterval)' == ''">1</SonetaSdkUpdateInterval>
  </PropertyGroup>

  <Import Project="common.items.props" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />

  <PropertyGroup Condition="'$(IsTestProject)' != 'true' AND $(StartProgram) == '' AND Exists($(SonetaAddonStartProgram))">
    <StartAction>Program</StartAction>
    <StartProgram>$(SonetaAddonStartProgram)</StartProgram>
    <StartArguments>/extpath=$(MSBuildProjectDirectory)\$(OutputPath)</StartArguments>
    <RunCommand>$(StartProgram)</RunCommand>
    <RunArguments>$(StartArguments)</RunArguments>
  </PropertyGroup>

  <UsingTask TaskName="CheckForSdkUpdates" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <GlobalJsonFilePath ParameterType="System.String" Required="true" />
      <LatestVersionFilePath ParameterType="System.String" Required="true" />
      <NugetApiUrl ParameterType="System.String" Required="true" />
      <SdkName ParameterType="System.String" Required="true" />
      <UpdateInterval ParameterType="System.Int32" Required="true" />
      <IsUpdateAvailable ParameterType="System.Boolean" Output="true" />
      <CurrentVersion ParameterType="System.String" Output="true" />
      <LatestVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Net.Http" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Method" Language="cs">
        <![CDATA[
        private const string GlobalJsonSdkVersionPattern = @"(?<=""Soneta.Sdk""\s*:\s*"")[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?(?=.*?"")";
        private const string NugetApiLatestVersionPattern = @"(?<="")[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?(?=.*?""\s*])";
        
        public override bool Execute()
        {
            CurrentVersion = GetCurrentVersion();
            LatestVersion = GetLatestVersion();
            IsUpdateAvailable = CheckIfUpdateAvailable(CurrentVersion, LatestVersion);

            return true;
        }

        private string GetCurrentVersion()
        {
            if (File.Exists(GlobalJsonFilePath))
            {
                var json = File.ReadAllText(GlobalJsonFilePath);
                return GetMatchingValue(json, GlobalJsonSdkVersionPattern);
            }

            return null;
        }

        private string GetLatestVersion()
        {
            var lastWriteTime = File.GetLastWriteTime(LatestVersionFilePath);
            var updateTime = lastWriteTime.AddMinutes(UpdateInterval);

            if (updateTime < DateTime.Now)
            {
                var latestVersion = GetLastVersionFromApi();

                using (var sw = File.CreateText(LatestVersionFilePath))
                    sw.WriteLine(latestVersion);

                return latestVersion;
            }
            else
            {
                return File.ReadAllText(LatestVersionFilePath).Trim();
            }
        }

        private string GetLastVersionFromApi()
        {
            using (var httpClient = new HttpClient())
            {
                var json = httpClient.GetStringAsync(NugetApiUrl).Result;
                return GetMatchingValue(json, NugetApiLatestVersionPattern);
            }
        }

        private string GetMatchingValue(string json, string pattern)
        {
            var match = Regex.Match(json, pattern);
            return match.Value;
        }

        private static bool CheckIfUpdateAvailable(string current, string latest)
        {
            if (string.IsNullOrEmpty(current) || string.IsNullOrEmpty(latest))
                return false;

            var currentVersion = new Version(current);
            var latestVersion = new Version(latest);
            return currentVersion.CompareTo(latestVersion) is -1;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="SonetaSdkCheckForUpdates" AfterTargets="Build" Condition="Exists($(GlobalJsonFilePath))">
    <CheckForSdkUpdates
      GlobalJsonFilePath="$(GlobalJsonFilePath)"
      LatestVersionFilePath="$(SonetaSdkLatestVersionFilePath)"
      NugetApiUrl="$(SonetaSdkNugetApiUrl)"
      SdkName="Soneta.Sdk"
      UpdateInterval="$(SonetaSdkUpdateInterval)">
      <Output TaskParameter="IsUpdateAvailable" PropertyName="IsSonetaSdkUpdateAvailable" />
      <Output TaskParameter="CurrentVersion" PropertyName="SonetaSdkCurrentVersion" />
      <Output TaskParameter="LatestVersion" PropertyName="SonetaSdkLatestVersion" />
    </CheckForSdkUpdates>
    <Warning Condition="$(IsSonetaSdkUpdateAvailable)" Text="Aktualnie używana wersja 'Soneta.Sdk' to: '$(SonetaSdkCurrentVersion)', istnieje nowsza wersja: '$(SonetaSdkLatestVersion)'. Aby ją ustawić, w pliku 'global.json' należy zamienić aktualny numer wesji 'Soneta.Sdk' na nowy." />
  </Target>

  <Target Name="ResolveSonetaSchemaReferences" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <SonetaSchemaReference Include="$([System.IO.Path]::GetDirectoryName( '%(Reference.HintPath)' ))\..\..\schema\*.business.xml"
        Condition="$( [System.String]::new( '%( Reference.HintPath )' ).Trim().Length ) &gt; 0" />
    </ItemGroup>
    <Message Text="SonetaSchemaReference: %(SonetaSchemaReference.Identity)" />
  </Target>

  <Target Name="ResolveSonetaGeneratorExe" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <SonetaGeneratorExe Include="%(Reference.HintPath)"
        Condition="$( [System.String]::new( '%( Reference.HintPath )' ).Contains( 'Soneta.Generator.exe' ) )" />
    </ItemGroup>
    <Message Text="SonetaGeneratorExe: @(SonetaGeneratorExe)" />
  </Target>

  <Target Name="PrepareSonetaGeneratorAssets" DependsOnTargets="ResolveSonetaSchemaReferences;ResolveSonetaGeneratorExe">
    <Error Text="Soneta.Generator.exe is missing." Condition=" '@(SonetaGeneratorExe)' == '' " />

    <PropertyGroup>
      <MetadataToRemove>Pack;PackagePath;SubType</MetadataToRemove>
    </PropertyGroup>

    <ItemGroup>
      <BusinessXmls Include="@(None)" Condition="$([System.String]::new('%(Filename)%(Extension)').EndsWith('business.xml', StringComparison.InvariantCultureIgnoreCase ))"/>
      <ConfigXmls Include="@(EmbeddedResource)" Condition="$([System.String]::new('%(Filename)%(Extension)').EndsWith('config.xml', StringComparison.InvariantCultureIgnoreCase ))"/>
      <WorkingXmls Include="@(BusinessXmls)" RemoveMetadata="$(MetadataToRemove)"/>
      <WorkingXmls Include="@(ConfigXmls)" RemoveMetadata="$(MetadataToRemove)"/>
    </ItemGroup>
  </Target>

  <Target Name="ExecuteSonetaGenerator" BeforeTargets="CoreCompile" DependsOnTargets="PrepareSonetaGeneratorAssets"
          Condition=" ( '$(RunSonetaGenerator)' == '' OR '$(RunSonetaGenerator)' != 'false' ) AND $( [System.IO.Directory]::GetFiles( '$(ProjectDir)' , '*.business.xml', SearchOption.AllDirectories ).Length ) &gt; 0 "
          Inputs="%(WorkingXmls.Identity)" Outputs="@(WorkingXmls->'%(RelativeDir)%(Filename).cs')">

    <ItemGroup>
      <!-- Replace-hack służy do wyeliminowania pliku X.business.xml w chwili przetwarzania skojarzonego z nim X.config.xml -->
      <SameAssemblyBusinessXmls Include="@(BusinessXmls)" Exclude="@(WorkingXmls->'%(Identity)'->Replace('.config.xml','.business.xml')->Replace('.Config.xml','.Business.xml'))"/>
    </ItemGroup>

    <Exec Condition="'$(SavedFile)' != '' AND '%(WorkingXmls.FullPath)' == '$(SavedFile)'"
          Command="&quot;@(SonetaGeneratorExe)&quot; &quot;$(SavedFile)&quot; FILE" />
    <Exec Condition="'@(SonetaSchemaReference->Count())' &gt; 0 AND '@(WorkingXmls->Count())' &gt; 0"
          Command="&quot;@(SonetaGeneratorExe)&quot; -s &quot;@(SonetaSchemaReference,'&quot; &quot;')&quot; @(SameAssemblyBusinessXmls,' ') &quot;%(WorkingXmls.FullPath)&quot;" />

    <ItemGroup>
      <GeneratedCs Include="@(WorkingXmls->'%(RelativeDir)%(Filename).cs')"/>
      <Compile Remove="@(GeneratedCs)" />
      <Compile Include="@(GeneratedCs)"/>
    </ItemGroup>
  </Target>

</Project>
